//=============================================================================
//
class MAS14P_Segway_New extends MAS14_Actor ClassGroup(MAS14P) placeable;
//
// Inverted pendulum OGATA System complete with the driver dynamics.
//
// CBPrice 03-04-18
// Transferred to Segway 10-04-18
//
// Status: Development
// CBP 03-08-21
// 14-03-21			RELEASE
//
//=============================================================================

//variables*********************************************************************

//static mesh components that make up this model--------------------------------

var StaticMeshComponent pend;
var StaticMeshComponent wheelL;
var StaticMeshComponent wheelR;

// Editable variables ----------------------------------------------------------
// These are normally the parameters of the model and the model's initial
// conditions. These should have default properties assigned.

var(MAS14P) float massCart;
var(MAS14P) float massPole;
var(MAS14P) float len;
var(MAS14P) float initTheta;
var(MAS14P) float initOmega;
var(MAS14P) float damping;
var(MAS14P) float desTheta;
var(MAS14P) float gravity;

// Integrator control
var(MAS14P) float deltaT;
var int itn;

// PID Parameters
var(MAS14P) float Kp;
var(MAS14P) float Ki;
var(MAS14P) float Kd;

// Speed controller

var(MAS14P) float Kp2;
var(MAS14P) float desVelyX;
var float ex;

var float e1,e2,u,du;
var float Ts;

// Motor benaviour
var(MAS14P) float thetaScaling;

// Internal variables ----------------------------------------------------------
// These are the "state" variables and may be the "output" variables, and also
// any internal constants (ie "numbers" which are required but which do not
// change.

// Internal "state" variables.

var float time;
var float omega;
var float theta;
var float error;
var float torque;

var float dispX;
var float velyX;

var float alpha;
var float accelX;

// MY STUFF
var float delOmega;
var float deltatheta;
var float deltavelyX;
var float deltadispX;
var float deltaU;
var float up; 

// Internal Constants. These may be used for conversions between units.
var float scaling;

var(MAS14P) float appTilt;

// Alt PID
var float integral;
var float derivative;

// functions********************************************************************

// Initialisation of this actor. do not change this. ---------------------------

function Actor_Initialize(PlayerController newPlayer){

  bRunning = false;

  super.Actor_Initialize(newPlayer);

  openMatlabFile();
  setLogFileColumnLabels();
  
  Ts = deltaT;

  initializeVariables();
  setInitialConditions();
  visualization();

  setTimer(deltaT,true,'computeTimer');

}

// Sets the initial values for this actor. You will need to write this code ----

function setInitialConditions() {
  theta = initTheta;
  dispX = 0.0;
  omega = 0.0;
  velyX = 0.0;
  dispX = 0.0;

  
  // MY STUFF
  delOmega = 0.0;
  deltatheta = 0.0;
  deltavelyX = 0.0;
  deltadispX = 0.0;
  deltaU = 0.0;
  up = 0.0;
 
}


// Resets the actor to its initial location and/or rotation and resets the
// initial values of the "state" variables.

function reset() {
  initializeVariables();         // set the variables to zeros
  setInitialConditions();        // set init conds of variables which need it
  visualization();
}

function resetController() {

  initializeVariables();
  setInitialConditions();

}

// Here you must set all internal "state" variables to zero.

function initializeVariables() {

  time = 0;
  omega = 0.0;
  u = 0;
  e1 = 0;
  e2 = 0;
  theta = 0;
  integral = 0;
  error = 0;
  velyX = 0.0;
  dispX = 0.0;
  
  // MY STUFF
  delOmega = 0.0;
  deltatheta = 0.0;
  deltavelyX = 0.0;
  deltadispX = 0.0;
  deltaU = 0.0;
  up = 0.0;

}
// Sets the column labels in the data log file. One line of code for each label-

function setLogFileColumnLabels() {
	local array<String> columnLabels;

  columnLabels.length = 0; //empty array.

  columnLabels[0] = "time";
  columnLabels[1] = "theta";
  

  // Add more here
  
  columnLabels[2] = "omega";
  columnLabels[3] = "dispX";
  columnLabels[4] = "velyX";
  columnLabels[5] = "accelX";
  
  writeMatlabFileHeaderNew(columnLabels);

}

// Here you specify which VARIABLES will be logged. This should agree with your
// column labels.

function logDataRecord() {

  local array<float> dataArray;

  dataArray.length = 0; //empty array.

  dataArray[0] = time;
  dataArray[1] = theta;


  // Add more here
  dataArray[2] = omega;
  dataArray[3] = dispX;
  dataArray[4] = velyX;
  dataArray[5] = accelX;
  
  writeMatlabFileRecordNew(dataArray);

}

// Overload the footer
function writeMatlabFileFooterNew(array<String> ccolumnLabels) {

  local int i;
  local String str;
  
  mlog.logF("];");
  
  i=0;
  while(i < ccolumnLabels.length) {
    str = ccolumnLabels[i]@"=A(:,"@i+1@");";
	mlog.LogF(str);
    i++;
  }
  
  // theta
  mlog.logF("subplot(5,1,1);");
  mlog.logF("plot("@ccolumnLabels[0]@","@ccolumnLabels[1]@");");
  str = "xlabel('"@ccolumnLabels[0]@"')";
  mlog.Logf(str);  
  str = "ylabel('"@ccolumnLabels[1]@"')";
  mlog.Logf(str);

  // omega
  mlog.logF("subplot(5,1,2);");
  mlog.logF("plot("@ccolumnLabels[0]@","@ccolumnLabels[5]@");");
  str = "xlabel('"@ccolumnLabels[0]@"')";
  mlog.Logf(str);  
  str = "ylabel('"@ccolumnLabels[5]@"')";
  mlog.Logf(str);  

  // dispX
  mlog.logF("subplot(5,1,3);");
  mlog.logF("plot("@ccolumnLabels[0]@","@ccolumnLabels[4]@");");
  str = "xlabel('"@ccolumnLabels[0]@"')";
  mlog.Logf(str);  
  str = "ylabel('"@ccolumnLabels[4]@"')";
  mlog.Logf(str);  

  // velyX
  mlog.logF("subplot(5,1,4);");
  mlog.logF("plot("@ccolumnLabels[0]@","@ccolumnLabels[3]@");");
  str = "xlabel('"@ccolumnLabels[0]@"')";
  mlog.Logf(str);  
  str = "ylabel('"@ccolumnLabels[3]@"')";
  mlog.Logf(str); 
  
  // accelX
  mlog.logF("subplot(5,1,5);");
  mlog.logF("plot("@ccolumnLabels[0]@","@ccolumnLabels[2]@");");
  str = "xlabel('"@ccolumnLabels[0]@"')";
  mlog.Logf(str);  
  str = "ylabel('"@ccolumnLabels[2]@"')";
  mlog.Logf(str);    
  
}


function float normaliseTheta(float th) {
  local float thetaNorm;
  thetaNorm = th;
  if(th > 2*pi) {
	while (thetaNorm > 2*pi)
	  thetaNorm -= 2*pi;
	return thetaNorm;
  }
	if(th < 2*pi) {
	while (thetaNorm < 2*pi)
	  thetaNorm += 2*pi;
	return thetaNorm;
  }
}


// Applies a tilt if certain key pressed
function applyTilt(float val) {
  theta += val;
}


// ============================ CVI ============================================

// called by the game engine on each rendering frame. Do not change this! Your
// changes to the code should appear in the computation() and visualization()
// functions.


function logData() {
  local int m;
  m = int(logInterval/deltaT);
  if( itn % m == 0) logDataRecord();
}

// ============================ CVI ============================================

// called by the game engine at each interval deltaT. do not change this! Your
// changes to the code should appear in the computation() and visualization()
// functions.

function computeTimer(){


  if(bRunning) {
   computation(deltaT);
   visualization();
   time += deltaT;
   itn++;
   logData();
 }
}

function computation(float dT) {


  // Pendulum dynamics ---------------------------------------------------------
  
  //(1) Calc the angular acceleration of the pendulum
  alpha = ((massPole + massCart)*gravity*theta + u + damping*velyX + ex)/(massCart*len);
  
  //(2) Update its angular velocity and angle
  
  delOmega = alpha * deltaT;
  Omega = omega + delOmega;
  
  deltatheta = omega * deltaT;
  theta = theta + deltatheta;


  // cart dynamics -------------------------------------------------------------
  
  //(3) Calc the linear acceleration of the cart
	accelX = (-massPole * gravity * theta - u - damping * velyX) / massCart;
	 
  //(4) Update its velocity and displacement
	deltavelyX = accelX  * deltaT;
	velyX = velyX + deltavelyX;
	
	deltadispX = velyX * deltaT;
	dispX = dispX + deltadispX;
 
  //(5)save errors from previous time steps.
	e2 = e1;
	e1 = error;
	error = desTheta - theta;

  //(6) Calc the drive signal
	//u = Kp * (desTheta - theta) + -kd * omega;
  
	deltaU = Kp * (error - e1) + Ki * error * deltaT + (Kd / deltaT) * (error - 2 * e1 + e2);
	

	u += deltaU;
	 
  //(7) If you want a speed controller put it here - simple proportional at first
//  if(time > 5) {
//	
//	
//  }

}
//------------------------------------------------------------------------------

// VISUALISATION
// Here you will write your code to visualise your variables -------------------

function Visualization(){
  local vector newVector;
  local rotator newRot;

  // First the drive movement
  newVector = default.wheelL.Translation;
  newVector.X = dispX * scaling;
  wheelL.SetTranslation(newVector);

  newVector = default.wheelR.Translation;
  newVector.X = dispX * scaling;
  wheelR.SetTranslation(newVector);

  // now the pendulum base translation
  newVector = default.pend.Translation;
  newVector.X = dispX * scaling;
  pend.SetTranslation(newVector);

  // Now rotate the pendulum.
  newRot = rot(0,0,0);
  newrot = default.pend.Rotation;
  newRot.pitch -= thetaScaling*65536*theta/(2*pi);
  pend.setRotation(newRot);

}

// INTERACTION
// used to display PARAMETERS or VARIABLES on the HUD --------------------------
// Here you will choose which parameters or variables will be displayed on the
// HUD. Note that the zero'th line is reserved to display the running status of
// the actor.

function SendValuesToHUDX( out array<string> HUDLine, out array<Color> LineCol){

  HUDLine.length = 0; //empty array.

  HUDLine[0] = "Inverted Pendulum";  // leave this alone
  HUDLine[1] = "Running: "@bRunning;  // leave this alone
  HUDLine[2] = "Time: "@time;


  // Add more stuff here
  HUDLine[3] = "ACCELERATION: "@accelX;
  HUDLine[4] = "VELOCITY: "@velyX;
  HUDLine[5] = "DISPOSITION: "@dispX;
  HUDLine[6] = "OMEGA: "@omega;
  
  LineCol.length = 0;
  LineCol[0] = MakeColor(255,255,0,255);
  LineCol[1] = MakeColor(255,0,0,255);
  LineCol[2] = MakeColor(0,0,255,255);
  LineCol[3] = MakeColor(0,0,255,255);
  LineCol[4] = MakeColor(0,0,255,255);
  LineCol[5] = MakeColor(0,0,255,255);
  LineCol[6] = MakeColor(0,0,255,255);
}

// INTERACTION
// Here you will write code to be able to change the values of parameters from
// the command line.

function SetParam(string paramName,float paramValue){
  WorldInfo.Game.Broadcast(self,paramName@paramValue);

  paramName = Caps(paramName); //capitalize so case insensitive

  if(paramName == Caps("Kp")){
	Kp = paramValue;
	resetController();
  }
  else if(paramName == Caps("Ki")){
	Ki = paramValue;
	resetController();
  }
  else if(paramName == Caps("Kd")){
	Kd = paramValue;
	resetController();
  }
  else if(paramName == Caps("deltaT")){
	deltaT = paramValue;
	setTimer(deltaT,true,'computeTimer');
  }
  else if(paramName == Caps("desTheta")){
	desTheta = paramValue;
  }
  else if(paramName == Caps("initTheta")){
	initTheta = paramValue;
	resetController();
	setInitialConditions();
  }

}

//process key presses for this actor--------------------------------------------
// Here you can assign various keys to produce any action you like. Each key is
// associated with a function, or global variable.

function ProcessKey(int controllerID,name key,EInputEvent eventType){
  //WorldInfo.Game.Broadcast(self,"key pressed was:"@key);  //displays key pressed

  if(eventType == IE_Released){
	if(Key == 'F1'){    //toggles bRunning (global variable)
	  bRunning = !bRunning;
	}
	if(Key == 'F2'){
	  reset();      // calls function to reset to initial conditions etc.
	}
    if(Key == 'F12'){
	  bRunning = false;
      closeMatlabFile();
    }	
	if(Key == 'g') {
	  applyTilt(appTilt);
	}
	if(Key == 'f') {
	  applyTilt(-appTilt);
	}
  }
}

// Helper Functions for this experiment Actor **********************************

 
defaultproperties  //***********************************************************
{

 bEdShouldSnap = true

  LightEnvironment=MyLightEnvironment  //need this to get lighting in UDK

  Components.Add(MyLightEnvironment)

  //drive
  Begin Object class=StaticMeshComponent Name=StaticMeshComponent0
    StaticMesh=StaticMesh'CBP_LabAssets.Segway.body'
	LightEnvironment=MyLightEnvironment
	bUsePrecomputedShadows=false
  End Object
  Components.Add(StaticMeshComponent0)

  //wheelL
   Begin Object class=StaticMeshComponent Name=StaticMeshComponent1
    StaticMesh=StaticMesh'CBP_LabAssets.Segway.wheel'
	LightEnvironment=MyLightEnvironment
    bUsePrecomputedShadows=FALSE
	Translation=(X=0,Y=23.0,Z=0.0)
  End Object
  Components.Add(StaticMeshComponent1)

  //wheelR
   Begin Object class=StaticMeshComponent Name=StaticMeshComponent2
    StaticMesh=StaticMesh'CBP_LabAssets.Segway.wheel'
	LightEnvironment=MyLightEnvironment
    bUsePrecomputedShadows=FALSE
	Translation=(X=0,Y=-23.0,Z=0.0)
  End Object
  Components.Add(StaticMeshComponent2)

  pend = StaticMeshComponent0
  wheelL = StaticMeshComponent1
  wheelR = StaticMeshComponent2
  //accept traces
  bCollideActors=true
  bBlockActors=true

  //custom var defaults
  bRunning=true

  scaling=52.5
  deltaT=0.01
  Ts=0.1
  

  initTheta=0.1
  initOmega=0.0
  desTheta=0.0
  thetaScaling=1.0
  gravity=9.81
  damping=0.0
  
  massCart=0.5
  massPole=0.2
  len=0.3
  
  appTilt=0.1


  Kp=10.0
  Ki=0.0
  Kd=1.0
  Kp2 = 2
  desVelyX = 0.5
}
